[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
[tool.poetry]
name = "flow-to-od"
version = "0.1.0"
authors = [
  "Chris Conlan <cconlan@turing.ac.uk>",
]
homepage = "https://github.com/cmconlan/OD-Estimation-Toy-Examples"
repository = "https://github.com/cmconlan/OD-Estimation-Toy-Examples"
license = "Apache-2.0"
description = "A set of methods to derive an estimate for OD patterns from observed edge levels flows on a road network."
readme = "README.md"

classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering",

]

[tool.poetry.dependencies]
python = ">=3.10"

pytest = { version = ">=6", optional = true }
pytest-cov = { version = ">=3", optional = true }

[tool.poetry.dev-dependencies]
pytest = ">= 6"
pytest-cov = ">= 3"

[tool.poetry.extras]
test = ["pytest", "pytest-cov"]
dev = ["pytest", "pytest-cov"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]

[tool.coverage]
run.source = ["flow_to_od"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]



[tool.ruff]
src = ["src"]
exclude = []
line-length = 88  # how long you want lines to be

[tool.ruff.format]
docstring-code-format = true  # code snippets in docstrings will be formatted

[tool.ruff.lint]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
]
ignore = [
  "PLR",    # Design related pylint codes
  "ISC001", # Conflicts with formatter
]
unfixable = [
  "F401",   # Would remove unused imports
  "F841",   # Would remove unused variables
]
flake8-unused-arguments.ignore-variadic-names = true  # allow unused *args/**kwargs

